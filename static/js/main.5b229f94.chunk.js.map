{"version":3,"sources":["loading.js","LoadingContainer.js","utils.js","apiKey.js","Bar.js","DownloadLink.js","Doughnut.js","RaceSlider.js","ProgramSlider.js","App.js","serviceWorker.js","index.js"],"names":["Loading","type","color","height","width","DownloadLink","props","state","className","Component","organizeInitialData","data","name","school","alias","website","school_url","city","zip","size","latest","student","programsByPercent","academics","program_percentage","raceBreakdown","demographics","race_ethnicity","inStateTuition","cost","tuition","out_of_state","outStateTuition","in_state","actScores","admissions","act_scores","satScores","sat_scores","noNullPrograms","Object","entries","key","value","noNullRace","numOfStudents","Math","round","programHeader","keys","programAccessors","values","raceHeader","raceAccessors","act25","act25reading","english","act25writing","writing","act25math","math","act50","act50reading","act50writing","act50math","act75","act75reading","act75writing","act75math","sat25","sat25reading","sat25writing","sat25math","sat50","sat50reading","sat50writing","sat50math","sat75","testHeader","genCSV","raceCSV","programCSV","satCSV","actCSV","organizeRaceData","year","organizeProgramData","apiKey","BarChart","labels","this","datasets","label","backgroundColor","stack","data25","data50","data75","options","scales","xAxes","stacked","yAxes","ticks","beginAtZero","legend","display","ref","r","csvLink","filename","target","defaults","global","animation","duration","DoughnutChart","position","align","style","margin","marks","0","25","50","75","100","RaceSlider","sliderMoved","onSliderChange","bind","handleChange","axios","get","responseMeta","response","results","organizedRaceData","setState","newYear","min","step","onChange","onAfterChange","defaultValue","ProgramSlider","organizedProgramData","App","saveAsPDF","input","window","document","getElementById","html2canvas","then","canvas","imgData","toDataURL","pdf","pdfConverter","addImage","save","catch","err","console","log","message","dataLoaded","id","onClick","print","LoadingContainer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.5b229f94.chunk.js","sourcesContent":["import React from \"react\"\nimport ReactLoading from \"react-loading\"\n\nexport const Loading = ({ type, color }) => (\n\t<ReactLoading type={type} color={color} height={12} width={30} />\n)\n","import { Loading } from \"./loading\"\nimport React, {Component} from 'react'\n\nclass DownloadLink extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {}\n    }\n\n    render() {\n        return (\n            <div className=\"logo\">\n            <Loading type=\"bars\" color=\"darkslategray\" />\n            <Loading type=\"bars\" color=\"lightseagreen\" />\n            <Loading type=\"bars\" color=\"lightcoral\" />\n            <Loading type=\"bars\" color=\"lightseagreen\" />\n            <Loading type=\"bars\" color=\"darkslategray\" />\n            </div>\n        )\n    }\n}\n\nexport default DownloadLink","export default function organizeInitialData(data) {\n\t//checking for if alias exists, modifying name if so\n\tlet name = data.school.name\n\tif (data.school.alias != null) {\n\t   name = `${name} - ${data.school.alias}`\n\t}\n\t\n\t//identifying all relevant parts of api data\n\tconst website = data.school.school_url\n\tconst city = data.school.city\n\tconst state = data.school.state\n\tconst zip = data.school.zip\n\tconst size = data.latest.student.size\n\tconst programsByPercent = data.latest.academics.program_percentage\n\tconst raceBreakdown = data.latest.student.demographics.race_ethnicity\n\tconst inStateTuition = data.latest.cost.tuition.out_of_state\n\tconst outStateTuition = data.latest.cost.tuition.in_state\n\tconst actScores = data.latest.admissions.act_scores\n\tconst satScores = data.latest.admissions.sat_scores\n \n\t//filtering through data for graphs to remove empty categories\n\tlet noNullPrograms = {}\n\tfor (let [key, value] of Object.entries(programsByPercent)) {\n\t\tif (value !== 0 && value > .03) {noNullPrograms[key] = value}\n\t}\n\n\tlet noNullRace = {}\n\tfor (let [key, value] of Object.entries(raceBreakdown)) {\n\t\t//transforming percent of student body to actual number of students\n\t\tlet numOfStudents = Math.round(size * value)\n\t\tif (value !== null) {noNullRace[key] = numOfStudents}\n\t  }\n\t  \n\t//breaking down objects into separate arrays of labels and data values\n\tconst programHeader = Object.keys(noNullPrograms)\n\tconst programAccessors = Object.values(noNullPrograms)\n\n\tconst raceHeader = Object.keys(noNullRace)\n\tconst raceAccessors = Object.values(noNullRace)\n \n\t//ordering test scores by percentile in very specific order for overlay bar chart\n\tconst act25 = actScores['25th_percentile']\n\tconst act25reading = act25.english\n\tconst act25writing = act25.writing\n\tconst act25math = act25.math\n\tconst act50 = actScores['midpoint']\n\tconst act50reading = act50.english\n\tconst act50writing = act50.writing\n\tconst act50math = act50.math\n\tconst act75 = actScores['75th_percentile']\n\tconst act75reading = act75.english\n\tconst act75writing = act75.writing\n\tconst act75math = act75.math\n\n\tconst sat25 = satScores['25th_percentile']\n\tconst sat25reading = sat25['critical_reading']\n\tconst sat25writing = sat25.writing\n\tconst sat25math = sat25.math\n\tconst sat50 = satScores['midpoint']\n\tconst sat50reading = sat50['critical_reading']\n\tconst sat50writing = sat50.writing\n\tconst sat50math = sat50.math\n\tconst sat75 = satScores['75th_percentile']\n\tconst sat75reading = sat75['critical_reading']\n\tconst sat75writing = sat75.writing\n\tconst sat75math = sat75.math\n\tconst testHeader = ['reading', 'writing', 'math']\n\n\t//nesting labels and data values into single array for CSV formatting\n\tconst genCSV = [\n\t   [\"name\", \"website\", \"city\", \"state\", \"zip\", \"size\"],\n\t   [name, website, city, state, zip, size],\n\t]\n\tconst programCSV = [programHeader, programAccessors]\n\tconst raceCSV = [raceHeader, raceAccessors]\n\tconst satCSV = [testHeader, [sat25reading, sat25writing, sat25math], [sat50reading, sat50writing, sat50math], [sat75reading, sat75writing, sat75math]]\n\tconst actCSV = [testHeader, [act25reading, act25writing, act25math], [act50reading, act50writing, act50math], [act75reading, act75writing, act75math]]\n\n\t//returning final versions of data to be set into local state in componentDidMount\n\treturn {\n\t   name: name,\n\t   website: website,\n\t   city: city,\n\t   state: state,\n\t   zip: zip,\n\t   size: size,\n\t   programsByPercent: programsByPercent,\n\t   raceBreakdown: raceBreakdown,\n\t   inStateTuition: inStateTuition,\n\t   outStateTuition: outStateTuition,\n\t   actScores: actScores,\n\t   satScores: satScores,\n\t   genCSV: genCSV,\n\t   raceCSV: raceCSV,\n\t   programCSV: programCSV,\n\t   satCSV: satCSV,\n\t   actCSV: actCSV\n\t}\n }\n\n export const organizeRaceData = (data, year) => {\n    const raceBreakdown = data[year].student.demographics.race_ethnicity\n    const size = data[year].student.size\n\n    let noNullRace = {}\n\tfor (let [key, value] of Object.entries(raceBreakdown)) {\n\t\tlet numOfStudents = Math.round(size * value)\n\t\tif (value !== null) {noNullRace[key] = numOfStudents}\n      }\n      \n    const raceHeader = Object.keys(noNullRace)\n    const raceAccessors = Object.values(noNullRace)\n    const raceCSV = [raceHeader, raceAccessors]\n\n    return raceCSV\n }\n\n\n export const organizeProgramData = (data, year) => {\n\tconst programsByPercent = data[year].academics.program_percentage\n\n    let noNullPrograms = {}\n\tfor (let [key, value] of Object.entries(programsByPercent)) {\n\t\tif (value !== 0 && value > .03) {noNullPrograms[key] = value}\n    }\n    \n\tconst programHeader = Object.keys(noNullPrograms)\n    const programAccessors = Object.values(noNullPrograms)\n    const programCSV = [programHeader, programAccessors]\n\n    return programCSV\n }","const apiKey = 'iP5R8AwSIZG19HgI2rwBYb4xwmYIeNYbyNUizpqC'\n\n export default apiKey","import {Bar} from 'react-chartjs-2'\nimport React, {Component} from 'react'\n\nexport class BarChart extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {}\n    }\n\n    render() {\n        return (\n            <div className=\"bar\">\n                    <Bar\n                        data={{\n                            labels: this.props.labels,\n                            datasets: [{\n                                label: '25th percentile',\n                                backgroundColor: 'lightseagreen',\n                                stack: 'Stack 0',\n                                data: this.props.data25\n                            }, {\n                                label: '50th percentile',\n                                backgroundColor: 'darkslategray',\n                                stack: 'Stack 0',\n                                data: this.props.data50\n                            }, {\n                                label: '75th percentile',\n                                backgroundColor: 'lightcoral',\n                                stack: 'Stack 0',\n                                data: this.props.data75\n                            }\n                        ]\n                        }}\n                        height={300}\n                        options={{\n                            scales: {\n                                xAxes: [{ stacked: true }],\n                                yAxes: [{\n                                  stacked: false,\n                                  ticks: {\n                                    beginAtZero: true,\n                                  },\n                                }]\n                            },\n                            legend: {\n                                display: 'true'\n                            }\n                        }\n                        }\n                    />\n                    <br />\n            </div>\n        )\n    }\n}","import React, {Component} from 'react'\nimport { CSVLink } from \"react-csv\"\n\nexport class DownloadLink extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {}\n    }\n\n    render() {\n        return (\n            <CSVLink\n            className=\"singleDownload\"\n            data={this.props.data}\n            ref={(r) => (this.csvLink = r)}\n            filename={this.props.filename}\n            target=\"_blank\"\n            >\n            DOWNLOAD THIS DATA\n            </CSVLink>\n        )\n    }\n}","import {defaults, Doughnut} from 'react-chartjs-2'\nimport React, {Component} from 'react'\ndefaults.global.animation.duration = 2000\n\nexport class DoughnutChart extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {}\n    }\n\n    render() {\n        return (\n            <div className=\"chart\">\n                    <Doughnut\n                        data={{\n                            labels: this.props.labels,\n                            datasets: [\n                            {\n                                data: this.props.datasets,\n                                backgroundColor: [    \n                                      'lightgreen',\n                                      'peachpuff',\n                                      'gray',\n                                      'bluegreen',\n                                      'lightslategray',\n                                      'lightseagreen',\n                                      'darkslategray',       \n                                      'white',\n                                      'lightcoral',\n                                      'beige',\n                                      'darkblue'\n                            ]\n                            }]\n                        }}\n                        height={200}\n                        options={{\n                            legend: {\n                                display: true,\n                                position: 'left',\n                                align: 'center'\n                            }\n                        }}\n                    />\n                    <br />\n            </div>\n        )\n    }\n}\n","import 'rc-slider/assets/index.css'\nimport Slider from 'rc-slider'\nimport React, {Component} from 'react'\nimport {DoughnutChart} from './Doughnut'\nimport axios from 'axios'\nimport apiKey from './apiKey'\nimport {organizeRaceData} from './utils'\n\nconst style = { width: 400, margin: 50 }\nconst marks = {\n  0: 2015,\n  25: 2016,\n  50: 2017,\n  75: 2018,\n  100: 2019,\n}\n\nexport class RaceSlider extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            year: 'latest',\n            labels: [],\n            datasets: [],\n            sliderMoved: false\n        }\n        this.onSliderChange = this.onSliderChange.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n\n    \n    async onSliderChange(value) {\n        const responseMeta = await axios.get(\n            `https://api.data.gov/ed/collegescorecard/v1/schools/?school.operating=1&2015.academics.program_available.assoc_or_bachelors=true&2015.student.size__range=1..&school.degrees_awarded.predominant__range=1..3&school.degrees_awarded.highest__range=2..4&id=240444&api_key=${apiKey}`\n        )\n        let response = responseMeta.data.results[0]\n        let organizedRaceData = organizeRaceData(response, this.state.year)\n        this.setState({\n            labels: organizedRaceData[0],\n            datasets: organizedRaceData[1],\n            sliderMoved: true\n        })\n      }\n    \n    handleChange(value) {\n        let newYear\n        if (value === 75) {\n            newYear = 2018\n        } else if (value === 50) {\n            newYear = 2017\n        } else if (value === 25) {\n            newYear = 2016\n        } else if (value === 0) {\n            newYear = 2015\n        } else {\n            newYear = 'latest'\n        }\n\n        this.setState({\n                year: newYear,\n            })\n    }\n\n\n    render() {\n        return ( \n            <div>\n                <div style={style}>\n                <Slider min={0} marks={marks} step={null} onChange={this.handleChange} onAfterChange={this.onSliderChange} defaultValue={2019} />\n                </div>\n                {this.state.sliderMoved ?\n                <DoughnutChart labels={this.state.labels} datasets={this.state.datasets} />\n                :\n                <DoughnutChart labels={this.props.labels} datasets={this.props.datasets}  />\n        }\n            </div>\n)}}\n\n","import 'rc-slider/assets/index.css'\nimport Slider from 'rc-slider'\nimport React, {Component} from 'react'\nimport {DoughnutChart} from './Doughnut'\nimport axios from 'axios'\nimport apiKey from './apiKey'\nimport {organizeProgramData} from './utils'\n\nconst style = { width: 400, margin: 50 }\nconst marks = {\n  0: 2015,\n  25: 2016,\n  50: 2017,\n  75: 2018,\n  100: 2019,\n}\n\nexport class ProgramSlider extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            year: 'latest',\n            labels: [],\n            datasets: [],\n            sliderMoved: false\n        }\n        this.onSliderChange = this.onSliderChange.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n\n    \n    async onSliderChange(value) {\n        const responseMeta = await axios.get(\n            `https://api.data.gov/ed/collegescorecard/v1/schools/?school.operating=1&2015.academics.program_available.assoc_or_bachelors=true&2015.student.size__range=1..&school.degrees_awarded.predominant__range=1..3&school.degrees_awarded.highest__range=2..4&id=240444&api_key=${apiKey}`\n        )\n        let response = responseMeta.data.results[0]\n        let organizedProgramData = organizeProgramData(response, this.state.year)\n        this.setState({\n            labels: organizedProgramData[0],\n            datasets: organizedProgramData[1],\n            sliderMoved: true\n        })\n      }\n    \n    handleChange(value) {\n        let newYear\n        if (value === 75) {\n            newYear = 2018\n        } else if (value === 50) {\n            newYear = 2017\n        } else if (value === 25) {\n            newYear = 2016\n        } else if (value === 0) {\n            newYear = 2015\n        } else {\n            newYear = 'latest'\n        }\n\n        this.setState({\n                year: newYear,\n            })\n    }\n\n\n    render() {\n        return ( \n            <div>\n                <div style={style}>\n                <Slider min={0} marks={marks} step={null} onChange={this.handleChange} onAfterChange={this.onSliderChange} defaultValue={2019} />\n                </div>\n                {this.state.sliderMoved ?\n                <DoughnutChart labels={this.state.labels} datasets={this.state.datasets} />\n                :\n                <DoughnutChart labels={this.props.labels} datasets={this.props.datasets}  />\n        }\n            </div>\n)}}\n\n","import React, { Component } from \"react\"\nimport \"./App.css\"\nimport axios from \"axios\"\nimport LoadingContainer from './LoadingContainer'\nimport { Loading } from \"./loading\"\nimport html2canvas from \"html2canvas\"\nimport pdfConverter from \"jspdf\"\nimport organizeInitialData from \"./utils\"\nimport apiKey from './apiKey'\nimport {BarChart} from './Bar'\nimport {DownloadLink} from './DownloadLink'\nimport {RaceSlider} from './RaceSlider'\nimport {ProgramSlider} from './ProgramSlider'\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            name: \"\",\n            website: \"\",\n            alias: \"\",\n            city: \"\",\n            state: \"\",\n            zip: \"\",\n            size: 0,\n            programsByPercent: {},\n            raceBreakdown: {},\n            inStateTuition: 0,\n            outStateTuition: 0,\n            actScores: {},\n            satScores: {},\n            genCSV: [],\n            programCSV: [],\n            raceCSV: [],\n            satCSV: [],\n            actCSV: [],\n            dataLoaded: false,\n        }\n    }\n\n    async componentDidMount() {\n        const responseMeta = await axios.get(\n            `https://api.data.gov/ed/collegescorecard/v1/schools/?school.operating=1&2015.academics.program_available.assoc_or_bachelors=true&2015.student.size__range=1..&school.degrees_awarded.predominant__range=1..3&school.degrees_awarded.highest__range=2..4&id=240444&api_key=${apiKey}`\n        )\n        let response = responseMeta.data.results[0]\n        const data = organizeInitialData(response)\n        this.setState(data)\n        this.setState({ dataLoaded: true })\n    }\n\n    saveAsPDF = () => {\n        let input = window.document.getElementById(\"main\")\n        html2canvas(input)\n        .then((canvas) => {\n            const imgData = canvas.toDataURL(\"image/png\")\n            const pdf = new pdfConverter(\"l\", \"pt\")\n            pdf.addImage(imgData, \"JPEG\", 10, 0, 680, 550)\n            pdf.save(\"ea.pdf\")\n        })\n        .catch((err) => console.log(err.message))\n    }\n\n    render() {\n        const dataLoaded = this.state.dataLoaded\n        return (\n            <div id=\"main\">\n                {dataLoaded ? (\n                <div id=\"schoolData\">\n                <div id=\"container\">\n                    <div>\n                        <div className=\"segment\">\n                            <p className=\"small\">{this.state.name}</p>\n                            <p className=\"small\">{this.state.website}</p>\n                        </div>\n                        <div className=\"segment\">\n                            <p className=\"small\">{this.state.city}</p>\n                            <p className=\"small\">{this.state.state}</p>\n                            <p className=\"small\">{this.state.zip}</p>\n                            <p className=\"small\">Student Population: {this.state.size}</p>\n                        <DownloadLink data={this.state.genCSV} filename=\"genData.csv\" />\n                     </div>\n                     <div className=\"segment\">\n                        <div className=\"chartContainer\">\n                        <h3>Race/Ethnicity</h3>\n                        <RaceSlider labels={this.state.raceCSV[0]} datasets={this.state.raceCSV[1]} />\n                        <DownloadLink data={this.state.raceCSV} filename=\"raceEthnData.csv\" />\n                        </div>\n                        <div className=\"chartContainer\">\n                        <h3>Academic Programs</h3>\n                        <ProgramSlider labels={this.state.programCSV[0]} datasets={this.state.programCSV[1]} />\n                        <DownloadLink data={this.state.programCSV} filename=\"programData.csv\" />\n                        </div>\n                     </div>\n                     <div className=\"segment\">\n                        <div className=\"chartContainer\">\n                        <h3>SAT by Percentile</h3>\n                        <BarChart labels={this.state.satCSV[0]} data25={this.state.satCSV[1]} data50={this.state.satCSV[2]} data75={this.state.satCSV[3]} />\n                        <DownloadLink data={this.state.satCSV} filename=\"satDataBy25/50/75percentile.csv\" />\n                        </div>\n                        <div className=\"chartContainer\">\n                        <h3>ACT By Percentile</h3>\n                        <BarChart labels={this.state.actCSV[0]} data25={this.state.actCSV[1]} data50={this.state.actCSV[2]} data75={this.state.actCSV[3]} />\n                        <DownloadLink data={this.state.actCSV} filename=\"actDataBy25/50/75percentile.csv\" />\n                        </div>\n                     </div>\n                  </div>\n                  <div className=\"segment\">\n                     <p onClick={this.saveAsPDF} className=\"button\">\n                        SAVE\n                     </p>\n                     <p onClick={() => window.print()} className=\"button\">\n                        PRINT\n                     </p>\n                  </div>\n               </div> \n            <div id=\"footer\">\n               <h2 id=\"bottomLogo\">EDUCATION ANALYTICS</h2>\n               <LoadingContainer />\n            </div>\n            </div>\n            ) : (\n               <Loading type=\"balls\" color=\"lightseagreen\"/>\n            )}\n         </div>\n      )\n    }\n}\n\nexport default App\n","const isLocalhost = Boolean(\n\twindow.location.hostname === \"localhost\" ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === \"[::1]\" ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n)\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener(\"load\", () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\"This web app is being served cache-first by a service \" +\n\t\t\t\t\t\t\t\"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n\t\t\t\t\t)\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\t// Is not . Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === \"installed\") {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t\"New content is available and will be used when all \" +\n\t\t\t\t\t\t\t\t\t\"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n\t\t\t\t\t\t\t)\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log(\"Content is cached for offline use.\")\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error(\"Error during service worker registration:\", error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { \"Service-Worker\": \"script\" },\n\t})\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get(\"content-type\");\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf(\"javascript\") === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload()\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t\"No internet connection found. App is running in offline mode.\"\n\t\t\t)\n\t\t})\n}\n\nexport function unregister() {\n\tif (\"serviceWorker\" in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then((registration) => {\n\t\t\t\tregistration.unregister()\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(error.message)\n\t\t\t})\n\t}\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}